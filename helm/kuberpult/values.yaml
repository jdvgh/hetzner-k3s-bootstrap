hosts:
  - kuberpult.example.com
kuberpult:
  hub: pregloz
  cd:
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 256m
        memory: 512Mi
  frontend:
    resources:
      limits:
        cpu: 500m
        memory: 250Mi
      requests:
        cpu: 256m
        memory: 250Mi
  git:
    url: "ssh://git@github.com/jdvgh/kuberpult-manifests-repo.git"
    branch: "main"
    manifestRepoUrl: "https://github.com/jdvgh/kuberpult-manifests-repo/tree/{branch}/{dir}"
  log:
    # Possible values are "gcp" for a gcp-optimized format and "default" for json
    format: "default"
    # Other possible values are "DEBUG", "INFO", "ERROR"
    level: "INFO"
  ingress:
    # The simplest setup involves an ingress, to make kuberpult available outside the cluster.
    # set to false, if you want use your own ingress:
    create: false
  ssh:
    # This section is necessary to checkout the manifest repo from git. Only ssh is supported (no https).
    identity:
      -----BEGIN OPENSSH PRIVATE KEY-----
      -----END OPENSSH PRIVATE KEY-----
    known_hosts: |
      github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
  # argocd:
  #   baseUrl: "argocd.example.com"
  #   # The token is generated by adding a user in argocd with apiKey permssions and generating a token.
  #   # 1. Add an entry to the configmap argocd-cm data with key "accounts.kuberpult" and value "apiKey"
  #   # 2. Run `argocd account generate-token --account kuberpult` and put the result here
  #   # 3. Grant kuberpult the necessary rights by adding these lines to the argocd-rbac-cm config map:
  #   #
  #   #  policy.csv: |
  #   #    p, role:kuberpult, applications, get, */*, allow
  #   #    g, kuberpult, role:kuberpult
  #   #
  #   token: ""
  #   # The argocd server url is used by kuberpult to reach out to argocd. If argocd is running in the same cluster, use the service name of the api server.
  #   # Also must include the protocol and port e.g. http://argocd-server.argocd.svc.cluster.local:80 or https://argocd.example.com:443
  #   server: "http://argocd-server.argocd.svc.cluster.local:80"
  #   insecure: true
  auth:
          
    dexAuth:
      enabled: true
      # Indicates if dex is to be installed. If you want to use your own Dex instance do not enable this flag.
      installDex: true
      # Defines the rbac policy when using Dex.
      # The permissions are added using the following format (<ROLE>, <ACTION>, <ENVIRONMENT_GROUP>:<ENVIRONMENT>, <APPLICATION>, allow).
      #
      # Available actions are: CreateLock, DeleteLock, CreateRelease, DeployRelease, CreateUndeploy, DeployUndeploy, CreateEnvironment, CreateEnvironmentApplication and DeployReleaseTrain.
      # The actions CreateUndeploy, DeployUndeploy and CreateEnvironmentApplication are environment independent meaning that the environment specified on the permission
      # needs to follow the following format <ENVIRONMENT_GROUP>:*, otherwise an error will be thrown.
      #
      # Example permission: Developer, CreateLock, development:development, *, allow
      # If no group is configured for an environment, the environment group name is the same as the environment name, here "development".
      # The policy will be available on the kuberpult-rbac config map.
      policy_csv: |
        p, role:Developer, CreateLock, *:*, *, allow
        p, role:Developer, DeleteLock, *:*, *, allow
        p, role:Developer, CreateRelease, *:*, *, allow
        p, role:Developer, DeployRelease, *:*, *, allow
        p, role:Developer, CreateUndeploy, *:*, *, allow
        p, role:Developer, DeployUndeploy, *:*, *, allow
        p, role:Developer, CreateEnvironment, *:*, *, allow
        p, role:Developer, DeleteEnvironmentApplication, *:*, *, allow
        p, role:Developer, DeployReleaseTrain, *:*, *, allow
        g, jdvgh-gh-org:jdvgh-org-team1, role:Developer
      # List of scopes to validate the token. Please add them as comma separated values.
      # g, jdvgh-gh-org:jdvgh-org-team1, role:admin
      clientId: "sample-kuberpult-dex"
      clientSecret: "sample-kuberpult-dex-secret"
      baseURL: "https://kuberpult.example.com/dex"
      scopes: "openid, groups, email, profile, federated:id"

  # # The Dex configuration values. For more information please check the Dex repository https://github.com/dexidp/dex
  dex:
    # List of environment variables to be added to the dex service pod.
    # Example, if you want your DEX service to have access to to the OAUTH_CLIENT_ID, you can specify
    # it the following way: 
    # 
    #  - name: OAUTH_CLIENT_ID
    #    valueFrom:
    #      secretKeyRef:
    #      name: kuberpult-oauth-client-id
    #        key: kuberpult-oauth-client-id
    # envVars:
    #  - name: OAUTH_CLIENT_ID
    #    valueFrom:
    #      secretKeyRef:
    #      name: kuberpult-oauth
    #      key: clientid
    #  - name: OAUTH_CLIENT_SECREP
    #    valueFrom:
    #      secretKeyRef:
    #      name: kuberpult-oauth
    #      key: clientsecret
    # The configuration of the OAUTH provider. 
    # For more information on the connectors to use see https://dexidp.io/docs/connectors/
    # Here is an example on how to connect with Google connector:
    #
    #     connectors:
    #     - type: google
    #     id: google
    #     name: Google
    #     config:
    #       clientID: 
    #       clientSecret: 
    #       redirectURI: http://127.0.0.1:5556/callback
    config:
      storage:
        type: memory
      issuer: https://kuberpult.com/dex
      connectors:
        # GitHub example
        - type: github
          id: github
          name: GitHub
          config:
            redirectURI: https://kuberpult.example.com/dex/callback
            clientID: "sample-github-oauth-id"
            clientSecret: "sample-github-oauth-secret"
            orgs:
              - name: jdvgh-gh-org
      staticClients:
      - id: sample-kuberpult-dex
        secret: sample-kuberpult-dex-secret
        name: 'kuberpult'
        # Where the app will be running.
        redirectURIs:
            - 'https://kuberpult.example.com/callback'
